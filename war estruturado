#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_NOME 30

// Struct de território
typedef struct {
    char nome[MAX_NOME];
    char continente[MAX_NOME];
    char dono[MAX_NOME];
    int exercitos;
} Territorio;

// Função para cadastrar um território
void cadastrarTerritorio(Territorio* territorios, int index) {
    printf("\n--- Cadastro do Território #%d ---\n", index + 1);
    printf("Nome do território: ");
    scanf(" %[^\n]", territorios[index].nome);

    printf("Continente: ");
    scanf(" %[^\n]", territorios[index].continente);

    printf("Dono do território: ");
    scanf(" %[^\n]", territorios[index].dono);

    printf("Número de exércitos: ");
    scanf("%d", &territorios[index].exercitos);
}

// Função para exibir todos os territórios
void exibirTerritorios(Territorio* territorios, int quantidade) {
    if (quantidade == 0) {
        printf("Nenhum território cadastrado.\n");
        return;
    }

    printf("\n--- Territórios ---\n");
    for (int i = 0; i < quantidade; i++) {
        printf("Território #%d:\n", i + 1);
        printf("  Nome: %s\n", territorios[i].nome);
        printf("  Continente: %s\n", territorios[i].continente);
        printf("  Dono: %s\n", territorios[i].dono);
        printf("  Exércitos: %d\n", territorios[i].exercitos);
        printf("-----------------------------\n");
    }
}

// Simulação de ataque
void atacar(Territorio* atacante, Territorio* defensor) {
    printf("\n--- Iniciando Ataque ---\n");
    printf("Atacante: %s (%s) com %d exércitos\n", atacante->nome, atacante->dono, atacante->exercitos);
    printf("Defensor: %s (%s) com %d exércitos\n", defensor->nome, defensor->dono, defensor->exercitos);

    if (atacante->exercitos < 2) {
        printf("Ataque não permitido. O atacante precisa ter pelo menos 2 exércitos.\n");
        return;
    }

    int dadoAtacante = rand() % 6 + 1;
    int dadoDefensor = rand() % 6 + 1;

    printf("Dado do atacante: %d\n", dadoAtacante);
    printf("Dado do defensor: %d\n", dadoDefensor);

    if (dadoAtacante > dadoDefensor) {
        printf("Resultado: Atacante venceu!\n");

        // Atualiza defensor
        strcpy(defensor->dono, atacante->dono);
        defensor->exercitos = 1;

        // Atualiza atacante
        atacante->exercitos -= 1;

    } else {
        printf("Resultado: Defensor resistiu ao ataque!\n");

        // Defensor perde 1 exército, se tiver
        if (defensor->exercitos > 1)
            defensor->exercitos -= 1;
    }

    printf("Ataque concluído.\n");
}

int main() {
    srand(time(NULL));  // Inicializa gerador de números aleatórios

    int quantidade;
    printf("Informe a quantidade de territórios: ");
    scanf("%d", &quantidade);

    // Alocação dinâmica
    Territorio* territorios = (Territorio*)malloc(quantidade * sizeof(Territorio));
    if (territorios == NULL) {
        printf("Erro ao alocar memória.\n");
        return 1;
    }

    // Cadastro dos territórios
    for (int i = 0; i < quantidade; i++) {
        cadastrarTerritorio(territorios, i);
    }

    int opcao;
    do {
        printf("\n=== MENU WAR DINÂMICO ===\n");
        printf("1. Exibir Territórios\n");
        printf("2. Atacar Território\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                exibirTerritorios(territorios, quantidade);
                break;

            case 2: {
                int idxAtacante, idxDefensor;
                exibirTerritorios(territorios, quantidade);
                printf("Escolha o número do território ATACANTE: ");
                scanf("%d", &idxAtacante);
                printf("Escolha o número do território DEFENSOR: ");
                scanf("%d", &idxDefensor);

                // Validação de índices
                if (idxAtacante < 1 || idxAtacante > quantidade || idxDefensor < 1 || idxDefensor > quantidade) {
                    printf("Índices inválidos.\n");
                    break;
                }

                if (idxAtacante == idxDefensor) {
                    printf("Um território não pode atacar a si mesmo.\n");
                    break;
                }

                atacar(&territorios[idxAtacante - 1], &territorios[idxDefensor - 1]);
                exibirTerritorios(territorios, quantidade);
                break;
            }

            case 0:
                printf("Encerrando o jogo...\n");
                break;

            default:
                printf("Opção inválida.\n");
        }

    } while (opcao != 0);

    free(territorios);
    return 0;
}
